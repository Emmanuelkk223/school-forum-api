generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  username  String   @unique @db.VarChar(30)
  email     String   @unique
  password  String
  firstName String   @map("first_name")
  lastName  String   @map("last_name")
  role      Role     @default(STUDENT)
  grade     String?
  subject   String?
  avatar    String?
  bio       String?  @db.VarChar(500)
  isActive  Boolean  @default(true) @map("is_active")
  lastLogin DateTime? @map("last_login")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  posts         Post[]
  categories    Category[]
  postLikes     PostLike[]
  replyLikes    ReplyLike[]
  replies       Reply[]

  @@map("users")
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique @db.VarChar(50)
  description String   @db.VarChar(200)
  color       String   @default("#007bff")
  icon        String   @default("fas fa-comments")
  isActive    Boolean  @default(true) @map("is_active")
  createdById String   @map("created_by_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  createdBy User   @relation(fields: [createdById], references: [id])
  posts     Post[]

  @@map("categories")
}

model Post {
  id           String    @id @default(cuid())
  title        String    @db.VarChar(200)
  content      String    @db.VarChar(5000)
  authorId     String    @map("author_id")
  categoryId   String    @map("category_id")
  tags         String[]
  views        Int       @default(0)
  isPinned     Boolean   @default(false) @map("is_pinned")
  isLocked     Boolean   @default(false) @map("is_locked")
  isActive     Boolean   @default(true) @map("is_active")
  isEdited     Boolean   @default(false) @map("is_edited")
  editedAt     DateTime? @map("edited_at")
  lastActivity DateTime  @default(now()) @map("last_activity")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  // Relations
  author   User         @relation(fields: [authorId], references: [id])
  category Category     @relation(fields: [categoryId], references: [id])
  likes    PostLike[]
  replies  Reply[]

  @@map("posts")
}

model Reply {
  id        String    @id @default(cuid())
  content   String    @db.VarChar(2000)
  authorId  String    @map("author_id")
  postId    String    @map("post_id")
  isEdited  Boolean   @default(false) @map("is_edited")
  editedAt  DateTime? @map("edited_at")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  // Relations
  author User        @relation(fields: [authorId], references: [id])
  post   Post        @relation(fields: [postId], references: [id], onDelete: Cascade)
  likes  ReplyLike[]

  @@map("replies")
}

model PostLike {
  id     String @id @default(cuid())
  userId String @map("user_id")
  postId String @map("post_id")

  // Relations
  user User @relation(fields: [userId], references: [id])
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("post_likes")
}

model ReplyLike {
  id      String @id @default(cuid())
  userId  String @map("user_id")
  replyId String @map("reply_id")

  // Relations
  user  User  @relation(fields: [userId], references: [id])
  reply Reply @relation(fields: [replyId], references: [id], onDelete: Cascade)

  @@unique([userId, replyId])
  @@map("reply_likes")
}

enum Role {
  STUDENT
  TEACHER
  ADMIN

  @@map("user_role")
}
